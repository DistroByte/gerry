// Code generated by 'yaegi extract git.dbyte.xyz/distro/gerry/bot'. DO NOT EDIT.

package symbols

import (
	"git.dbyte.xyz/distro/gerry/bot"
	"git.dbyte.xyz/distro/gerry/shared"
	"reflect"
)

func init() {
	Symbols["git.dbyte.xyz/distro/gerry/bot/bot"] = map[string]reflect.Value{
		// type definitions
		"Bot":             reflect.ValueOf((*bot.Bot)(nil)),
		"MessageContext":  reflect.ValueOf((*bot.MessageContext)(nil)),
		"PluginCallFunc":  reflect.ValueOf((*bot.PluginCallFunc)(nil)),
		"PluginRunFunc":   reflect.ValueOf((*bot.PluginRunFunc)(nil)),
		"PluginSetupFunc": reflect.ValueOf((*bot.PluginSetupFunc)(nil)),

		// interface wrapper definitions
		"_Bot": reflect.ValueOf((*_git_dbyte_xyz_distro_gerry_bot_Bot)(nil)),
	}
}

// _git_dbyte_xyz_distro_gerry_bot_Bot is an interface wrapper for Bot type
type _git_dbyte_xyz_distro_gerry_bot_Bot struct {
	IValue    interface{}
	WRegister func(command string, f func(bot bot.Bot, context bot.MessageContext, arguments []string, config shared.Config) error)
	WSend     func(context bot.MessageContext, message string)
}

func (W _git_dbyte_xyz_distro_gerry_bot_Bot) Register(command string, f func(bot bot.Bot, context bot.MessageContext, arguments []string, config shared.Config) error) {
	W.WRegister(command, f)
}
func (W _git_dbyte_xyz_distro_gerry_bot_Bot) Send(context bot.MessageContext, message string) {
	W.WSend(context, message)
}
