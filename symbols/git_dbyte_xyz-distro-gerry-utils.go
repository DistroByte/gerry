// Code generated by 'yaegi extract git.dbyte.xyz/distro/gerry/utils'. DO NOT EDIT.

package symbols

import (
	"git.dbyte.xyz/distro/gerry/utils"
	"reflect"
)

func init() {
	Symbols["git.dbyte.xyz/distro/gerry/utils/utils"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewMarkovChain": reflect.ValueOf(utils.NewMarkovChain),

		// type definitions
		"MarkovChain":     reflect.ValueOf((*utils.MarkovChain)(nil)),
		"MarkovChainImpl": reflect.ValueOf((*utils.MarkovChainImpl)(nil)),

		// interface wrapper definitions
		"_MarkovChain": reflect.ValueOf((*_git_dbyte_xyz_distro_gerry_utils_MarkovChain)(nil)),
	}
}

// _git_dbyte_xyz_distro_gerry_utils_MarkovChain is an interface wrapper for MarkovChain type
type _git_dbyte_xyz_distro_gerry_utils_MarkovChain struct {
	IValue              interface{}
	WAddWordTransition  func(from string, to string)
	WAddWordTransitions func(mappings map[string]string)
	WChooseNextWord     func(word string)
}

func (W _git_dbyte_xyz_distro_gerry_utils_MarkovChain) AddWordTransition(from string, to string) {
	W.WAddWordTransition(from, to)
}
func (W _git_dbyte_xyz_distro_gerry_utils_MarkovChain) AddWordTransitions(mappings map[string]string) {
	W.WAddWordTransitions(mappings)
}
func (W _git_dbyte_xyz_distro_gerry_utils_MarkovChain) ChooseNextWord(word string) {
	W.WChooseNextWord(word)
}
